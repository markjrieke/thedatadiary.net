{
  "hash": "58cf15eb08773d0e6863da1668d99385",
  "result": {
    "markdown": "---\ntitle: \"Churn, baby, churn\"\ndate: '2023-11-24'\ncategories: [stan, survival]\ndescription: \"A survivor's guide to estimating customer lifetime from discrete censored churn data\"\nimage: header.png\nfilters:\n  - add-code-files\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(riekelib)\nlibrary(cmdstanr)\n```\n:::\n\n\nUnderstanding the average customer lifetime is crucial for businesses as it provides valuable insights into customer behavior and the overall health of the customer base. It's a critical component of revenue forecasting and estimating the average customer lifetime value and can also be used to highlight opportunities for product improvement. Average customer lifetime is also connected to customer [churn rates](https://en.wikipedia.org/wiki/Churn_rate) --- if the churn rate is known, you can calculate the average customer lifetime.^[Under the assumption that the churn rate is constant over time. More on that later.]\n\nEstimating the churn rate from customer data is an interesting modeling problem. A simple average of the churn rate among customers who *have* churned will overestimate the churn rate --- this average excludes active customers who will (potentially) remain active for a long time! A better method is to estimate churn via [censored regression](https://en.wikipedia.org/wiki/Censored_regression_model), which can account for observations with missing (i.e., censored) events (in this case, the churn date for active customers).^[These are also called survival models. I assume this is because they're also used in measuring the effect of clinical treatments on a patient's expected remaining lifetime. I prefer to call them censored models because it describes the data more accurately. Plus it's a bit less morbid.] Censored models, however, make some assumptions that can conflict with the reality of data collection. Namely, censored models assume that *time is continuous* and *no events occur at $t = 0$*. \n\nIn reality, data is often recorded in discrete time. For example, if I look at when customers drop out of a subscription service, the data may be grouped by day, month, quarter, or year. A censored model assumes that the data is continuous, rather than grouped.^[A sufficient number of discrete time groups approximates continuous time, but when there are few time periods, this approximation can fall apart a bit.] Additionally, when measured in discrete time, churn data can include events at $t=0$. In the subscription service example, if the data were grouped by month, we may observe some customers that cancel their subscription prior to month end. These customers never made it to the end of the month ($t=1$), so their churn is recorded during month $0$. \n\nAs an alternative to a traditional censored model, I'll present a modified censored model that estimates the probability of an event occurring in a discrete time period as the probability that the event occurs between two points in continuous time. This modification naturally accounts for the case when an event occurs at $t=0$. I'll build up to this model over the course of applying several faulty models to simulated data of player churn after the launch of a new mobile game. The discrete censored model should recover the simulated churn rate and can be used to estimate the average player lifetime. \n\n## Deriving average customer lifetime \n\nLet's suppose that one million players download and play a new mobile game on launch day. If we assume that 15% of players will stop playing each day, the number of daily players over the first fifteen days might look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set parameters\nn_players <- 1e6\nchurn_rate <- 0.15\nn_days <- 15\n\n# simulate daily number of active players\nset.seed(12345)\ndays <- 0:n_days\nactive_players <- vector(length = length(days))\nactive_players[1] <- n_players\nfor (d in 2:length(days)) {\n  active_players[d] <- rbinom(1, active_players[d - 1], (1 - churn_rate))\n}\n\n# how we might pull from a curated table\nplayer_data <- \n  tibble(day = days,\n         players = active_players) \n\n# plot!\nplayer_data %>%\n  ggplot(aes(x = day,\n             y = players)) + \n  geom_col(fill = \"royalblue\",\n           alpha = 0.75) +\n  scale_y_comma() +\n  theme_rieke() +\n  labs(title = \"**Number of daily active players**\",\n       subtitle = glue::glue(\"Given an initial player base of **\",\n                             scales::label_comma()(n_players),\n                             \"** and a **\",\n                             scales::label_percent(accuracy = 1)(churn_rate),\n                             \"** churn rate.\"),\n       x = \"Days since install\",\n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=2700}\n:::\n:::\n\n\nDespite having an initial player base of one million players, by the fifteenth day, there are fewer than one-hundred thousand active players! Given this data, we may want to answer two questions: *What is the churn rate?* and *What is the average customer lifetime?* I manually set the churn rate to 15%, but we'll need to do some work to derive the average customer lifetime.\n\nThe active players on any given day was simulated as a draw from a binomial distribution. The number of trials is the number of active players on the previous day, $\\text{Players}_{\\text{day}[d-1]}$, and the probability of success, $\\theta$, is given as $1-R$, where $R$ is the churn rate. \n\n$$\n\\begin{align*}\n\\text{Players}_{\\text{day}[d]} &\\sim \\text{Binomial}(\\text{Players}_{\\text{day}[d-1]}, \\theta) \\\\\n\\theta &= 1 - R\n\\end{align*}\n$$\n\nThe expected value from this distribution is then the probability of success multiplied by the number of trials.\n\n$$\n\\begin{align*}\n\\hat{\\text{Players}_{\\text{day}[d]}} &= \\text{Players}_{\\text{day}[d-1]} \\times (1 - R)\n\\end{align*}\n$$\n\nIf we want to know the expected number of players on day two, we first need the expected number of players on day one. Since day one is dependent on day 0, we can recursively plug-in the same equation for $\\text{Players}_{\\text{day}[1]}$. Simplifying shows that the number of active players on day two is only dependent on the initial number of players, the churn rate, and the number of days in between.\n\n$$\n\\begin{align*}\n\\hat{\\text{Players}_{\\text{day}[2]}} &= \\text{Players}_{\\text{day}[1]} \\times (1 - R) \\\\\n&= [\\text{Players}_{\\text{day}[0]} \\times (1 - R)] \\times (1 - R) \\\\\n&= \\text{Players}_{\\text{day}[0]} \\times (1-R)^2\n\\end{align*}\n$$\n\nThis equation can be generalized to estimate the expected number of players on any day, $d$ by recursively multiplying the initial player base by $(1 - R)$.^[As we'll see later, this sort of recursive multiplication suggests that $e$ is hiding out somewhere in our equation.]\n\n$$\n\\hat{\\text{Players}_{\\text{day}[d]}} = \\text{Players}_{\\text{day}[0]} \\times (1 - R)^d\n$$\n\nDividing by the initial player population gives the proportion of players remaining on day $d$. \n\n$$\n\\frac{\\text{Players}_{\\text{day}[d]}}{\\text{Players}_{\\text{day}[0]}} = (1 - R)^d\n$$\n\nPlotting this over each day, $d$, yields something resembling a survival curve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = 0:90) %>%\n  mutate(y = (1 - churn_rate)^x) %>%\n  ggplot(aes(x = x,\n             y = y)) + \n  geom_line(color = \"royalblue\") +\n  scale_y_percent() +\n  theme_rieke() +\n  labs(title = \"**Expected proportion of remaining players**\",\n       subtitle = glue::glue(\"Given a **\",\n                             scales::label_percent(accuracy = 1)(churn_rate),\n                             \"** churn rate\"),\n       x = \"Days since install\",\n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=2700}\n:::\n:::\n\n\nSince the proportion is unitless, integrating over days gives the \"average number of days.\" *This is exactly what we're looking for* --- the average customer lifetime (in days).^[I had to break out the good 'ole [integration tables](https://www.mathsisfun.com/calculus/integration-rules.html) for this one, but look! I found $e$!] \n\n$$\n\\begin{align*}\n\\text{Average Customer Lifetime} &= \\int_0^\\infty (1 - R)^d \\text{d}d \\\\\n\\text{Average Customer Lifetime} &= \\frac{-1}{\\log(1 - R)}\n\\end{align*}\n$$\n\nSince the churn rate $R$ is known to be 15%, the average customer lifetime in this example is just **<span style='color:royalblue'>6.2</span>** days. When the churn rate isn't known, however, we can estimate it with a model. \n\n## Modeling churn\n\n### Model 1: Binomial\n\nSuppose the churn rate is not known and instead all we have is the daily active player data (in this case, 15 days worth). The first few rows of the dataset show that the playerbase is declining day-over-day:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayer_data %>%\n  mutate(across(everything(), ~scales::label_comma()(.x))) %>%\n  rename(Day = day,\n         `Active Players` = players) %>%\n  slice_head(n = 5) %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|Day |Active Players |\n|:---|:--------------|\n|0   |1,000,000      |\n|1   |849,938        |\n|2   |722,133        |\n|3   |613,865        |\n|4   |521,802        |\n:::\n:::\n\n\nA reasonable first pass at a model definition would be to model the daily number of active players as a binomial where the number of trials is the number of active players on the previous day. In fact, this is *exactly* how the simulated data were created.\n\n$$\n\\begin{align*}\n\\text{Players}_{\\text{day}[d]} &\\sim \\text{Binomial}(\\text{Players}_{\\text{day}[d-1]}, \\theta) \\\\\n\\theta &= 1 - R \\\\\nR &\\sim \\text{Beta}(1, 1)\n\\end{align*}\n$$\n\nWhile this process can be used to simulate data, it causes problems when modeling. Namely, this model grossly overstates the number of observations that are in the dataset. For a player to be a part of $\\text{Players}_{\\text{day}[d-1]}$, they must also be a part of $\\text{Player}_{\\text{day}[d-2]}, \\ \\text{Player}_{\\text{day}[d-3]}, \\ \\dots, \\ \\text{Player}_{\\text{day}[0]}$. This player gets counted as $d-1$ observations! \n\nFor example, to pass data to this model, we'd need a slight variation of the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayer_data %>%\n  mutate(players_lag = lag(players)) %>%\n  drop_na() %>%\n  mutate(across(everything(), ~scales::label_comma()(.x))) %>%\n  rename(Day = day,\n         `Players [d]` = players,\n         `Players [d-1]` = players_lag) %>%\n  slice_head(n = 4) %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|Day |Players [d] |Players [d-1] |\n|:---|:-----------|:-------------|\n|1   |849,938     |1,000,000     |\n|2   |722,133     |849,938       |\n|3   |613,865     |722,133       |\n|4   |521,802     |613,865       |\n:::\n:::\n\n\nThe total number of observations in this model is the sum of the column `Players [d-1]`. In this case, despite there only being one million players, this model would have 6,081,336 observations!\n\nA more reasonable alternative would be to model the number of players on a specific day, $d=D$.\n\n$$\n\\begin{align*}\n\\text{Players}_{\\text{day}[D]} &\\sim \\text{Binomial}(\\text{Players}_{\\text{day}[0]}, \\theta_D) \\\\\n\\theta_D &= (1 - R)^D \\\\\nR &\\sim \\text{Beta}(1, 1)\n\\end{align*}\n$$\n\n:::{add-from=binomial_churn.stan}\n\n```{.stan}\n```\n\n:::\n\nIn this model, the number of observations according to the model matches reality: one million players. The downside, however, is that this model is only able to show information about the specific day, $D$ --- it assumes that the churn rate is constant.^[In this case, this happens to be a really good assumption, since I simulated the data with a constant churn rate. But that isn't always the case! Other models are better equipped to handle constant *or* varying churn rates.] Regardless, fitting this model for $d = 10$ recovers the churn rate and average customer lifetime. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# day to evaluate\nD <- 10\n\n# number of \"successes\" on day \nS <- \n  player_data %>%\n  filter(day == D) %>%\n  pull(players)\n\n# data for the model\nbinomial_data <-\n  list(\n    D = D,\n    K = n_players,\n    S = S\n  )\n\n# compile, fit, & display output\nbinomial_model <-\n  cmdstan_model(\"binomial_churn.stan\")\n\nbinomial_fit <- \n  binomial_model$sample(\n    data = binomial_data,\n    iter_warmup = 1000,\n    iter_sampling = 1000,\n    chains = 4,\n    parallel_chains = 4,\n    seed = 987\n  )\n\nbinomial_fit$summary() %>%\n  filter(variable %in% c(\"churn_rate\", \"average_lifetime\")) %>%\n  select(variable, median, q5, q95) %>%\n  knitr::kable()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|variable         |   median|       q5|      q95|\n|:----------------|--------:|--------:|--------:|\n|churn_rate       | 0.150094| 0.149815| 0.150373|\n|average_lifetime | 6.148955| 6.136569| 6.161380|\n:::\n:::\n\n\n### Model 2: Censored Regression\n\nThe binomial model worked well in this case, but a better approach would be to estimate the churn day for each player directly. This provides a way to incorporate each day into the model without overestimating the number of observations in the dataset. Given the simulated dataset, a plot of the number of churns per day is visually similar to the number of active players per day, but the scale is much smaller.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayer_data %>%\n  mutate(churned = players - lead(players)) %>%\n  ggplot(aes(x = day,\n             y = churned)) +\n  geom_col(fill = \"royalblue\",\n           alpha = 0.75) +\n  scale_y_comma() + \n  theme_rieke() +\n  labs(title = \"**Number of churns per day**\",\n       subtitle = glue::glue(\"From an initial player base of **\",\n                             scales::label_comma()(n_players),\n                             \"**\"),\n       x = \"Days since install\",\n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=2700}\n:::\n:::\n\n\nFrom this data, we might model the churn date, $T$ as a random draw from an exponential distribution characterized by a rate, $\\lambda$.\n\n$$\nT \\sim \\text{Exponential}(\\lambda)\n$$\n\nThere is, however, a slight problem: not all players have churned yet! Of the million initial players, there are still 87,470 players active as of day 15. For these players, we won't know how many churned on day 15 until we see data for day 16 (hence, there is no daily churn data for day 15 in the chart above). The players in the churn plot are *uncensored* --- we've observed their churn date.^[Were this real data, you could strongly argue that *all* players have censored data. Just because a player isn't active today doesn't mean they won't be active down the line. I've simulated the data as explicitly uncensored, so we're just gonna roll with it for now.] To include censored data in the model, we need to dip our toes into a bit of calculus.\n\nFor the remaining active players, we don't know what their churn date, $T$, will be. We do know, however, their most recent day of activity, $t$. Given this, we know that $T$ must be *at least* $t$. From a modeling perspective, we want to know $\\Pr(T \\geq t)$. Given an exponential distribution, this corresponds to the shaded area under the [probability density function](https://en.wikipedia.org/wiki/Probability_density_function):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = 0:30) %>%\n  mutate(y = dexp(x, -log(1 - churn_rate)),\n         lower = if_else(x < 15, NA, 0),\n         upper = if_else(x < 15, NA, y)) %>%\n  ggplot(aes(x = x,\n             y = y,\n             ymin = lower,\n             ymax = upper)) +\n  geom_vline(xintercept = 15,\n             linetype = \"dashed\",\n             color = \"gray60\") + \n  geom_ribbon(alpha = 0.5,\n              fill = \"royalblue\") + \n  geom_line() +\n  scale_y_percent() + \n  theme_rieke() +\n  labs(title = \"**Probability density of an exponential distribution**\",\n       subtitle = glue::glue(\"With a rate of **\\u03bb = \",\n                             scales::label_number(accuracy = 0.01)(-log(1 - churn_rate)),\n                             \"**\"),\n       x = NULL,\n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=2700}\n:::\n:::\n\n\nThe area under the curve can be evaluated as the integral from $t$ to $\\infty$. With this, we can add the censored data into the model. For math-y reasons,^[The average of an exponential distribution is $1/\\lambda$, so we can just take the inverse of the empirically derived average above.] $\\lambda$ is connect-able to $R$ with $\\lambda = -\\log(1-R)$. \n\n$$\n\\begin{align*}\nT_\\text{uncensored} &\\sim \\text{Exponential}(\\lambda) \\\\\nt_\\text{censored} &\\sim \\int_t^\\infty \\text{Exponential}(\\lambda) \\\\\n\\lambda &= -\\log(1 - R) \\\\\nR &\\sim \\text{Beta}(1, 1)\n\\end{align*}\n$$\n\n:::{add-from=censored_churn.stan}\n\n```{.stan}\n```\n\n:::\n\nFitting this model, however, *doesn't* recover the simulated parameters as expected! The churn rate is underestimated and the average lifetime is overestimated.^[Stan also complains about `NaN`S popping up in the calculation of diagnostics.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchurn_data <- \n  player_data %>%\n  mutate(churned = players - lead(players)) %>%\n  drop_na()\n\ncensored_data <-\n  list(\n    N_uncensored = nrow(churn_data),\n    K_uncensored = churn_data$churned,\n    T_uncensored = churn_data$day,\n    N_censored = 1,\n    K_censored = n_players - sum(churn_data$churned),\n    t_censored = max(player_data$day)\n  )\n\n# compile, fit, & display output\ncensored_model <-\n  cmdstan_model(\"censored_churn.stan\")\n\ncensored_fit <-\n  censored_model$sample(\n    data = censored_data,\n    iter_warmup = 1000,\n    iter_sampling = 1000,\n    chains = 4,\n    parallel_chains = 4,\n    seed = 876\n  )\n\ncensored_fit$summary() %>%\n  filter(variable %in% c(\"churn_rate\", \"average_lifetime\")) %>%\n  select(variable, median, q5, q95) %>%\n  knitr::kable()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|variable         |   median|       q5|      q95|\n|:----------------|--------:|--------:|--------:|\n|churn_rate       | 0.131446| 0.131394| 0.131501|\n|average_lifetime | 7.095930| 7.092770| 7.098970|\n:::\n:::\n\n\nThe problem is due to discrete time. There are about 150,000 players who churn within the first day. Because churn is recorded in discrete days, however, their churn time is recorded as $T=0$.^[This problem still occurs if a churn day is redefined to the \"first-missed\" day (i.e., all churns at $T=0$ become $T=1$). The probelem has to do with discrete time in general.] An exponential distribution changes most rapidly near 0, so not accounting for discrete time steps in the model loses a lot of information.\n\n### Model 3: Discrete Censored Regression\n\nIn the simulated data, any player who isn't active by day 1 is counted as churned on day 0. One way to think about this is that any intra-day churns get rounded down in the dataset. For example, $T=0.7$ and $T=10.3$ appear as $T=0$ and $T=10$ in the dataset, respectively. To mimic this, the model needs to estimate the probability of falling into the range between $T$ and $T+1$, rather than just the probability of observing $T$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = 0:30) %>%\n  mutate(y = dexp(x, -log(1 - churn_rate)),\n         t0 = if_else(x %in% 0:1, y, NA),\n         t10 = if_else(x %in% 10:11, y, NA)) %>%\n  ggplot(aes(x = x, \n             y = y)) + \n  geom_ribbon(aes(ymin = 0,\n                  ymax = t0),\n              fill = \"royalblue\",\n              alpha = 0.75) + \n  geom_ribbon(aes(ymin = 0,\n                  ymax = t10),\n              fill = \"orange\",\n              alpha = 0.75) + \n  geom_line() +\n  scale_y_percent() + \n  theme_rieke() +\n  labs(title = \"**Probability density of an exponential distribution**\",\n       subtitle = glue::glue(\"Probability of falling in **\",\n                             color_text(\"(0, 1)\", \"royalblue\"),\n                             \"** and **\",\n                             color_text(\"(10, 11)\", \"orange\"),\n                             \"**\"),\n       x = NULL,\n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=2700}\n:::\n:::\n\n\nMathematically, observing a churn at $T$ can be expressed as the integral of the distribution between $T$ and $T+1$.\n\n$$\nT_\\text{uncensored} \\sim \\int_T^{T+1} \\text{Exponential}(\\lambda)\n$$\n\nSince the probability of observing a censored data point, $t$, is already estimated with an integral from $t$ to $\\infty$, there's no additional changes needed to convert to discrete time. A discrete-time censored model can then be expressed as:\n\n$$\n\\begin{align*}\nT_\\text{uncensored} &\\sim \\int_T^{T+1} \\text{Exponential}(\\lambda) \\\\\nt_\\text{censored} &\\sim \\int_t^\\infty \\text{Exponential}(\\lambda) \\\\\n\\lambda &= -\\log(1 - R) \\\\\nR &\\sim \\text{Beta}(1, 1)\n\\end{align*}\n$$\n\n:::{add-from=discrete_censored_churn.stan}\n\n```{.stan}\n```\n\n:::\n\nFitting the discrete model recovers the expected parameters from simulation: a 15% churn rate and an average lifetime of about 6.2 days.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# same data passed to the new model\ndiscrete_censored_data <- censored_data\n\n# compile, fit, & display output\ndiscrete_censored_model <-\n  cmdstan_model(\"discrete_censored_churn.stan\")\n\ndiscrete_censored_fit <-\n  discrete_censored_model$sample(\n    data = discrete_censored_data,\n    iter_warmup = 1000,\n    iter_sampling = 1000,\n    chains = 4,\n    step_size = 0.002,\n    parallel_chains = 4,\n    seed = 876\n  )\n\ndiscrete_censored_fit$summary() %>%\n  filter(variable %in% c(\"churn_rate\", \"average_lifetime\")) %>%\n  select(variable, median, q5, q95) %>%\n  knitr::kable()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|variable         |  median|       q5|      q95|\n|:----------------|-------:|--------:|--------:|\n|churn_rate       | 0.15005| 0.149814| 0.150285|\n|average_lifetime | 6.15089| 6.140479| 6.161441|\n:::\n:::\n\n\n## Closing thoughts\n\nCensored models are a useful set of tools for working with customer churn data. Data in the wild, however, may not necessarily live up to the assumptions that most out-of-the-box censored regression models make: that events occur in continuous time after $t=0$. The discrete censored model presented above bridges the gap between model assumptions and the reality of data collection. By modeling events that are recorded in discrete time as the probability of occurring between two continuous time points, the discrete censored model allows for a censored model to be fit to data aggregated into discrete time steps.\n\nIn the particular examples above, the models assumed a constant churn rate. This was an appropriate assumption in this case, but may not always be. Alternatives to the exponential distribution, such as the [Weibull](https://en.wikipedia.org/wiki/Weibull_distribution) or [gamma](https://en.wikipedia.org/wiki/Gamma_distribution) can be used to model time-varying churn, or time itself could be included as a model component in estimating a distribution's parameter. Further, in the above example, all players join the game on the exact same day. In reality, players (or, in general, customers), will have different real-world times that correspond to $t=0$, and datasets contain more than one censored datapoint.\n\nRegardless of model complexity, average customer lifetime can be derived from a distribution of churn data and a discrete censored model offers a way to estimate the underlying churn distribution while respecting the format that the data was aggregated.  \n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}